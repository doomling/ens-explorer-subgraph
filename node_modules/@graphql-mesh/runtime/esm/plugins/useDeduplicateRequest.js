import { memoize1 } from '@graphql-tools/utils';
import { getHeadersObj } from '@graphql-mesh/utils';
import { Response } from '@whatwg-node/fetch';
export function useDeduplicateRequest() {
    const getReqResMapByContext = memoize1((_context) => {
        return new Map();
    });
    return {
        onFetch({ url, options = {}, context, info, fetchFn, setFetchFn }) {
            if (context !== null) {
                let method = 'GET';
                if (options.method) {
                    method = options.method;
                }
                if (method === 'GET') {
                    let headers = {};
                    if (options.headers) {
                        headers = getHeadersObj(options.headers);
                    }
                    const acceptHeader = headers.Accept || headers.accept;
                    if (acceptHeader === null || acceptHeader === void 0 ? void 0 : acceptHeader.includes('application/json')) {
                        const reqResMap = getReqResMapByContext(context);
                        const dedupCacheKey = JSON.stringify({
                            url,
                            headers,
                        });
                        setFetchFn(() => {
                            let dedupRes$ = reqResMap.get(dedupCacheKey);
                            if (dedupRes$ == null) {
                                dedupRes$ = fetchFn(url, options, context, info).then(async (res) => ({
                                    res,
                                    resText: await res.text(),
                                }));
                                reqResMap.set(dedupCacheKey, dedupRes$);
                            }
                            return dedupRes$.then(({ res, resText }) => new Response(resText, res));
                        });
                    }
                }
            }
        },
    };
}
