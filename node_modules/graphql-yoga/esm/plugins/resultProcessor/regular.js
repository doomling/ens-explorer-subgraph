import { isAsyncIterable } from '@graphql-tools/utils';
import { getResponseInitByRespectingErrors } from '../../error.js';
import { jsonStringifyResult } from './stringify.js';
export function processRegularResult(executionResult, fetchAPI, acceptedHeader) {
    if (isAsyncIterable(executionResult)) {
        return new fetchAPI.Response(null, {
            status: 406,
            statusText: 'Not Acceptable',
            headers: {
                accept: 'application/json; charset=utf-8, application/graphql-response+json; charset=utf-8',
            },
        });
    }
    const headersInit = {
        'Content-Type': acceptedHeader + '; charset=utf-8',
    };
    const responseInit = getResponseInitByRespectingErrors(executionResult, headersInit, acceptedHeader === 'application/json');
    const textEncoder = new fetchAPI.TextEncoder();
    const responseBody = jsonStringifyResult(executionResult);
    const decodedString = textEncoder.encode(responseBody);
    headersInit['Content-Length'] = decodedString.byteLength.toString();
    return new fetchAPI.Response(decodedString, responseInit);
}
